https://github.com/NixOS/nixpkgs/pull/31263

Most use cases for buildFHSUserEnv include running dynamically linked binaries
built for FHS-compliant Linux distributions. Sometimes these are wrapped with a
shell script that rewrites LD_LIBRARY_PATH: see #21109, #31136, and a few other
cases not on bug tracker (RPG Maker MV on Steam).

Additionally, we currently use LD_LIBRARY_PATH for OpenGL.

To make sure no one overrides our library paths, add NIX_LD_LIBRARY_PATH.

_dl_fatal_printf doesn't report strerror(errno) because it causes compilation
errors that, while can be fixed, require adding weak attribute to quite a few
symbols which results in a much larger and thus less maintainable patch.
--- a/elf/rtld.c
+++ b/elf/rtld.c
@@ -1315,9 +1315,34 @@ of this helper program; chances are you did not intend to run this program.\n\
   DL_SYSDEP_OSCHECK (_dl_fatal_printf);
 #endif
 
+  char *nix_library_path = getenv ("NIX_LD_LIBRARY_PATH");
+  char *combined_library_path = NULL;
+
+  size_t library_path_len = library_path ? strlen (library_path) : 0;
+  size_t nix_library_path_len = nix_library_path ? strlen (nix_library_path) : 0;
+
+  if (!nix_library_path_len) {
+    combined_library_path = /*const-cast*/(char *) library_path;
+  } else if (!library_path_len) {
+    combined_library_path = nix_library_path;
+  } else {
+    combined_library_path = malloc (library_path_len + nix_library_path_len + 2);
+
+    if (!combined_library_path)
+      _dl_fatal_printf ("can't allocate combined_library_path\n");
+
+    memcpy (combined_library_path, library_path, library_path_len);
+    combined_library_path[library_path_len] = ':';
+    memcpy (combined_library_path + library_path_len + 1, nix_library_path,
+            nix_library_path_len + 1 /*include the terminating zero*/);
+  }
+
   /* Initialize the data structures for the search paths for shared
      objects.  */
-  _dl_init_paths (library_path);
+  _dl_init_paths (combined_library_path);
+
+  if (nix_library_path_len && library_path_len)
+    free (combined_library_path);
 
   /* Initialize _r_debug.  */
   struct r_debug *r = _dl_debug_initialize (GL(dl_rtld_map).l_addr,
--- a/sysdeps/generic/unsecvars.h
+++ b/sysdeps/generic/unsecvars.h
@@ -18,6 +18,7 @@
   "LD_DYNAMIC_WEAK\0"							      \
   "LD_HWCAP_MASK\0"							      \
   "LD_LIBRARY_PATH\0"							      \
+  "NIX_LD_LIBRARY_PATH\0"						      \
   "LD_ORIGIN_PATH\0"							      \
   "LD_PRELOAD\0"							      \
   "LD_PROFILE\0"							      \
